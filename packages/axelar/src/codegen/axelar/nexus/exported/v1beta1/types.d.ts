import { KeyType } from "../../../tss/exported/v1beta1/types";
import { Coin, CoinAmino, CoinSDKType } from "../../../../cosmos/base/v1beta1/coin";
import { BinaryWriter } from "../../../../binary";
export declare enum TransferState {
    TRANSFER_STATE_UNSPECIFIED = 0,
    TRANSFER_STATE_PENDING = 1,
    TRANSFER_STATE_ARCHIVED = 2,
    TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3,
    UNRECOGNIZED = -1
}
export declare const TransferStateSDKType: typeof TransferState;
export declare const TransferStateAmino: typeof TransferState;
export declare function transferStateFromJSON(object: any): TransferState;
export declare function transferStateToJSON(object: TransferState): string;
export declare enum TransferDirection {
    TRANSFER_DIRECTION_UNSPECIFIED = 0,
    TRANSFER_DIRECTION_FROM = 1,
    TRANSFER_DIRECTION_TO = 2,
    UNRECOGNIZED = -1
}
export declare const TransferDirectionSDKType: typeof TransferDirection;
export declare const TransferDirectionAmino: typeof TransferDirection;
export declare function transferDirectionFromJSON(object: any): TransferDirection;
export declare function transferDirectionToJSON(object: TransferDirection): string;
export declare enum GeneralMessage_Status {
    STATUS_UNSPECIFIED = 0,
    STATUS_APPROVED = 1,
    STATUS_PROCESSING = 2,
    STATUS_EXECUTED = 3,
    STATUS_FAILED = 4,
    UNRECOGNIZED = -1
}
export declare const GeneralMessage_StatusSDKType: typeof GeneralMessage_Status;
export declare const GeneralMessage_StatusAmino: typeof GeneralMessage_Status;
export declare function generalMessage_StatusFromJSON(object: any): GeneralMessage_Status;
export declare function generalMessage_StatusToJSON(object: GeneralMessage_Status): string;
/** Chain represents the properties of a registered blockchain */
export interface Chain {
    name: string;
    supportsForeignAssets: boolean;
    keyType: KeyType;
    module: string;
}
export interface ChainProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.Chain";
    value: Uint8Array;
}
/** Chain represents the properties of a registered blockchain */
export interface ChainAmino {
    name?: string;
    supports_foreign_assets?: boolean;
    key_type?: KeyType;
    module?: string;
}
export interface ChainAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.Chain";
    value: ChainAmino;
}
/** Chain represents the properties of a registered blockchain */
export interface ChainSDKType {
    name: string;
    supports_foreign_assets: boolean;
    key_type: KeyType;
    module: string;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddress {
    chain: Chain;
    address: string;
}
export interface CrossChainAddressProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.CrossChainAddress";
    value: Uint8Array;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddressAmino {
    chain?: ChainAmino;
    address?: string;
}
export interface CrossChainAddressAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.CrossChainAddress";
    value: CrossChainAddressAmino;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddressSDKType {
    chain: ChainSDKType;
    address: string;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransfer {
    recipient: CrossChainAddress;
    asset: Coin;
    id: bigint;
    state: TransferState;
}
export interface CrossChainTransferProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.CrossChainTransfer";
    value: Uint8Array;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransferAmino {
    recipient?: CrossChainAddressAmino;
    asset?: CoinAmino;
    id?: string;
    state?: TransferState;
}
export interface CrossChainTransferAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.CrossChainTransfer";
    value: CrossChainTransferAmino;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransferSDKType {
    recipient: CrossChainAddressSDKType;
    asset: CoinSDKType;
    id: bigint;
    state: TransferState;
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFee {
    coins: Coin[];
}
export interface TransferFeeProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.TransferFee";
    value: Uint8Array;
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFeeAmino {
    coins?: CoinAmino[];
}
export interface TransferFeeAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.TransferFee";
    value: TransferFeeAmino;
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFeeSDKType {
    coins: CoinSDKType[];
}
export interface FeeInfo {
    chain: string;
    asset: string;
    feeRate: Uint8Array;
    minFee: Uint8Array;
    maxFee: Uint8Array;
}
export interface FeeInfoProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.FeeInfo";
    value: Uint8Array;
}
export interface FeeInfoAmino {
    chain?: string;
    asset?: string;
    fee_rate?: string;
    min_fee?: string;
    max_fee?: string;
}
export interface FeeInfoAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.FeeInfo";
    value: FeeInfoAmino;
}
export interface FeeInfoSDKType {
    chain: string;
    asset: string;
    fee_rate: Uint8Array;
    min_fee: Uint8Array;
    max_fee: Uint8Array;
}
export interface Asset {
    denom: string;
    isNativeAsset: boolean;
}
export interface AssetProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.Asset";
    value: Uint8Array;
}
export interface AssetAmino {
    denom?: string;
    is_native_asset?: boolean;
}
export interface AssetAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.Asset";
    value: AssetAmino;
}
export interface AssetSDKType {
    denom: string;
    is_native_asset: boolean;
}
export interface GeneralMessage {
    id: string;
    sender: CrossChainAddress;
    recipient: CrossChainAddress;
    payloadHash: Uint8Array;
    status: GeneralMessage_Status;
    asset?: Coin;
    sourceTxId: Uint8Array;
    sourceTxIndex: bigint;
}
export interface GeneralMessageProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.GeneralMessage";
    value: Uint8Array;
}
export interface GeneralMessageAmino {
    id?: string;
    sender?: CrossChainAddressAmino;
    recipient?: CrossChainAddressAmino;
    payload_hash?: string;
    status?: GeneralMessage_Status;
    asset?: CoinAmino;
    source_tx_id?: string;
    source_tx_index?: string;
}
export interface GeneralMessageAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.GeneralMessage";
    value: GeneralMessageAmino;
}
export interface GeneralMessageSDKType {
    id: string;
    sender: CrossChainAddressSDKType;
    recipient: CrossChainAddressSDKType;
    payload_hash: Uint8Array;
    status: GeneralMessage_Status;
    asset?: CoinSDKType;
    source_tx_id: Uint8Array;
    source_tx_index: bigint;
}
export interface WasmMessage {
    sourceChain: string;
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: Uint8Array;
    sourceTxId: Uint8Array;
    sourceTxIndex: bigint;
    sender: Uint8Array;
}
export interface WasmMessageProtoMsg {
    typeUrl: "/axelar.nexus.exported.v1beta1.WasmMessage";
    value: Uint8Array;
}
export interface WasmMessageAmino {
    source_chain?: string;
    source_address?: string;
    destination_chain?: string;
    destination_address?: string;
    payload_hash?: string;
    source_tx_id?: string;
    source_tx_index?: string;
    sender?: string;
}
export interface WasmMessageAminoMsg {
    type: "/axelar.nexus.exported.v1beta1.WasmMessage";
    value: WasmMessageAmino;
}
export interface WasmMessageSDKType {
    source_chain: string;
    source_address: string;
    destination_chain: string;
    destination_address: string;
    payload_hash: Uint8Array;
    source_tx_id: Uint8Array;
    source_tx_index: bigint;
    sender: Uint8Array;
}
export declare const Chain: {
    typeUrl: string;
    encode(message: Chain, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): Chain;
    fromPartial(object: Partial<Chain>): Chain;
    fromAmino(object: ChainAmino): Chain;
    toAmino(message: Chain): ChainAmino;
    fromAminoMsg(object: ChainAminoMsg): Chain;
    fromProtoMsg(message: ChainProtoMsg): Chain;
    toProto(message: Chain): Uint8Array;
    toProtoMsg(message: Chain): ChainProtoMsg;
};
export declare const CrossChainAddress: {
    typeUrl: string;
    encode(message: CrossChainAddress, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): CrossChainAddress;
    fromPartial(object: Partial<CrossChainAddress>): CrossChainAddress;
    fromAmino(object: CrossChainAddressAmino): CrossChainAddress;
    toAmino(message: CrossChainAddress): CrossChainAddressAmino;
    fromAminoMsg(object: CrossChainAddressAminoMsg): CrossChainAddress;
    fromProtoMsg(message: CrossChainAddressProtoMsg): CrossChainAddress;
    toProto(message: CrossChainAddress): Uint8Array;
    toProtoMsg(message: CrossChainAddress): CrossChainAddressProtoMsg;
};
export declare const CrossChainTransfer: {
    typeUrl: string;
    encode(message: CrossChainTransfer, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): CrossChainTransfer;
    fromPartial(object: Partial<CrossChainTransfer>): CrossChainTransfer;
    fromAmino(object: CrossChainTransferAmino): CrossChainTransfer;
    toAmino(message: CrossChainTransfer): CrossChainTransferAmino;
    fromAminoMsg(object: CrossChainTransferAminoMsg): CrossChainTransfer;
    fromProtoMsg(message: CrossChainTransferProtoMsg): CrossChainTransfer;
    toProto(message: CrossChainTransfer): Uint8Array;
    toProtoMsg(message: CrossChainTransfer): CrossChainTransferProtoMsg;
};
export declare const TransferFee: {
    typeUrl: string;
    encode(message: TransferFee, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): TransferFee;
    fromPartial(object: Partial<TransferFee>): TransferFee;
    fromAmino(object: TransferFeeAmino): TransferFee;
    toAmino(message: TransferFee): TransferFeeAmino;
    fromAminoMsg(object: TransferFeeAminoMsg): TransferFee;
    fromProtoMsg(message: TransferFeeProtoMsg): TransferFee;
    toProto(message: TransferFee): Uint8Array;
    toProtoMsg(message: TransferFee): TransferFeeProtoMsg;
};
export declare const FeeInfo: {
    typeUrl: string;
    encode(message: FeeInfo, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): FeeInfo;
    fromPartial(object: Partial<FeeInfo>): FeeInfo;
    fromAmino(object: FeeInfoAmino): FeeInfo;
    toAmino(message: FeeInfo): FeeInfoAmino;
    fromAminoMsg(object: FeeInfoAminoMsg): FeeInfo;
    fromProtoMsg(message: FeeInfoProtoMsg): FeeInfo;
    toProto(message: FeeInfo): Uint8Array;
    toProtoMsg(message: FeeInfo): FeeInfoProtoMsg;
};
export declare const Asset: {
    typeUrl: string;
    encode(message: Asset, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): Asset;
    fromPartial(object: Partial<Asset>): Asset;
    fromAmino(object: AssetAmino): Asset;
    toAmino(message: Asset): AssetAmino;
    fromAminoMsg(object: AssetAminoMsg): Asset;
    fromProtoMsg(message: AssetProtoMsg): Asset;
    toProto(message: Asset): Uint8Array;
    toProtoMsg(message: Asset): AssetProtoMsg;
};
export declare const GeneralMessage: {
    typeUrl: string;
    encode(message: GeneralMessage, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): GeneralMessage;
    fromPartial(object: Partial<GeneralMessage>): GeneralMessage;
    fromAmino(object: GeneralMessageAmino): GeneralMessage;
    toAmino(message: GeneralMessage): GeneralMessageAmino;
    fromAminoMsg(object: GeneralMessageAminoMsg): GeneralMessage;
    fromProtoMsg(message: GeneralMessageProtoMsg): GeneralMessage;
    toProto(message: GeneralMessage): Uint8Array;
    toProtoMsg(message: GeneralMessage): GeneralMessageProtoMsg;
};
export declare const WasmMessage: {
    typeUrl: string;
    encode(message: WasmMessage, writer?: BinaryWriter): BinaryWriter;
    fromJSON(object: any): WasmMessage;
    fromPartial(object: Partial<WasmMessage>): WasmMessage;
    fromAmino(object: WasmMessageAmino): WasmMessage;
    toAmino(message: WasmMessage): WasmMessageAmino;
    fromAminoMsg(object: WasmMessageAminoMsg): WasmMessage;
    fromProtoMsg(message: WasmMessageProtoMsg): WasmMessage;
    toProto(message: WasmMessage): Uint8Array;
    toProtoMsg(message: WasmMessage): WasmMessageProtoMsg;
};
