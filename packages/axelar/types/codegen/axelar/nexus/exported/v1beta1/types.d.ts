import { KeyType } from "../../../tss/exported/v1beta1/types";
import { Coin, CoinSDKType } from "../../../../cosmos/base/v1beta1/coin";
import { Long } from "../../../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare enum TransferState {
    TRANSFER_STATE_UNSPECIFIED = 0,
    TRANSFER_STATE_PENDING = 1,
    TRANSFER_STATE_ARCHIVED = 2,
    TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3,
    UNRECOGNIZED = -1
}
export declare const TransferStateSDKType: typeof TransferState;
export declare function transferStateFromJSON(object: any): TransferState;
export declare function transferStateToJSON(object: TransferState): string;
export declare enum TransferDirection {
    TRANSFER_DIRECTION_UNSPECIFIED = 0,
    TRANSFER_DIRECTION_INCOMING = 1,
    TRANSFER_DIRECTION_OUTGOING = 2,
    UNRECOGNIZED = -1
}
export declare const TransferDirectionSDKType: typeof TransferDirection;
export declare function transferDirectionFromJSON(object: any): TransferDirection;
export declare function transferDirectionToJSON(object: TransferDirection): string;
export declare enum GeneralMessage_Status {
    STATUS_UNSPECIFIED = 0,
    STATUS_APPROVED = 1,
    STATUS_PROCESSING = 2,
    STATUS_EXECUTED = 3,
    STATUS_FAILED = 4,
    UNRECOGNIZED = -1
}
export declare const GeneralMessage_StatusSDKType: typeof GeneralMessage_Status;
export declare function generalMessage_StatusFromJSON(object: any): GeneralMessage_Status;
export declare function generalMessage_StatusToJSON(object: GeneralMessage_Status): string;
/** Chain represents the properties of a registered blockchain */
export interface Chain {
    name: string;
    supportsForeignAssets: boolean;
    keyType: KeyType;
    module: string;
}
/** Chain represents the properties of a registered blockchain */
export interface ChainSDKType {
    name: string;
    supports_foreign_assets: boolean;
    key_type: KeyType;
    module: string;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddress {
    chain?: Chain;
    address: string;
}
/** CrossChainAddress represents a generalized address on any registered chain */
export interface CrossChainAddressSDKType {
    chain?: ChainSDKType;
    address: string;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransfer {
    recipient?: CrossChainAddress;
    asset?: Coin;
    id: Long;
    state: TransferState;
}
/**
 * CrossChainTransfer represents a generalized transfer of some asset to a
 * registered blockchain
 */
export interface CrossChainTransferSDKType {
    recipient?: CrossChainAddressSDKType;
    asset?: CoinSDKType;
    id: Long;
    state: TransferState;
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFee {
    coins: Coin[];
}
/** TransferFee represents accumulated fees generated by the network */
export interface TransferFeeSDKType {
    coins: CoinSDKType[];
}
export interface FeeInfo {
    chain: string;
    asset: string;
    feeRate: Uint8Array;
    minFee: Uint8Array;
    maxFee: Uint8Array;
}
export interface FeeInfoSDKType {
    chain: string;
    asset: string;
    fee_rate: Uint8Array;
    min_fee: Uint8Array;
    max_fee: Uint8Array;
}
export interface Asset {
    denom: string;
    isNativeAsset: boolean;
}
export interface AssetSDKType {
    denom: string;
    is_native_asset: boolean;
}
export interface GeneralMessage {
    id: string;
    sender?: CrossChainAddress;
    recipient?: CrossChainAddress;
    payloadHash: Uint8Array;
    status: GeneralMessage_Status;
    asset?: Coin;
    sourceTxId: Uint8Array;
    sourceTxIndex: Long;
}
export interface GeneralMessageSDKType {
    id: string;
    sender?: CrossChainAddressSDKType;
    recipient?: CrossChainAddressSDKType;
    payload_hash: Uint8Array;
    status: GeneralMessage_Status;
    asset?: CoinSDKType;
    source_tx_id: Uint8Array;
    source_tx_index: Long;
}
export declare const Chain: {
    encode(message: Chain, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): Chain;
    fromPartial(object: Partial<Chain>): Chain;
};
export declare const CrossChainAddress: {
    encode(message: CrossChainAddress, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): CrossChainAddress;
    fromPartial(object: Partial<CrossChainAddress>): CrossChainAddress;
};
export declare const CrossChainTransfer: {
    encode(message: CrossChainTransfer, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): CrossChainTransfer;
    fromPartial(object: Partial<CrossChainTransfer>): CrossChainTransfer;
};
export declare const TransferFee: {
    encode(message: TransferFee, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): TransferFee;
    fromPartial(object: Partial<TransferFee>): TransferFee;
};
export declare const FeeInfo: {
    encode(message: FeeInfo, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): FeeInfo;
    fromPartial(object: Partial<FeeInfo>): FeeInfo;
};
export declare const Asset: {
    encode(message: Asset, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): Asset;
    fromPartial(object: Partial<Asset>): Asset;
};
export declare const GeneralMessage: {
    encode(message: GeneralMessage, writer?: _m0.Writer): _m0.Writer;
    fromJSON(object: any): GeneralMessage;
    fromPartial(object: Partial<GeneralMessage>): GeneralMessage;
};
