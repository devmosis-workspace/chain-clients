import { Rpc } from "../helpers";
import { MsgToggleForcePush, MsgToggleForcePushResponse, MsgRevokeProviderPermission, MsgRevokeProviderPermissionResponse, MsgAuthorizeProvider, MsgAuthorizeProviderResponse, MsgCreateTask, MsgCreateTaskResponse, MsgUpdateTask, MsgUpdateTaskResponse, MsgDeleteTask, MsgDeleteTaskResponse, MsgSetBranch, MsgSetBranchResponse, MsgMultiSetBranch, MsgMultiSetBranchResponse, MsgDeleteBranch, MsgDeleteBranchResponse, MsgMultiDeleteBranch, MsgMultiDeleteBranchResponse, MsgSetTag, MsgSetTagResponse, MsgMultiSetTag, MsgMultiSetTagResponse, MsgDeleteTag, MsgDeleteTagResponse, MsgMultiDeleteTag, MsgMultiDeleteTagResponse, MsgAddMember, MsgAddMemberResponse, MsgUpdateMemberRole, MsgUpdateMemberRoleResponse, MsgRemoveMember, MsgRemoveMemberResponse, MsgCreateBounty, MsgCreateBountyResponse, MsgUpdateBountyExpiry, MsgUpdateBountyExpiryResponse, MsgCloseBounty, MsgCloseBountyResponse, MsgDeleteBounty, MsgDeleteBountyResponse, MsgExercise, MsgExerciseResponse, MsgCreateRelease, MsgCreateReleaseResponse, MsgUpdateRelease, MsgUpdateReleaseResponse, MsgDeleteRelease, MsgDeleteReleaseResponse, MsgCreatePullRequest, MsgCreatePullRequestResponse, MsgUpdatePullRequestTitle, MsgUpdatePullRequestTitleResponse, MsgUpdatePullRequestDescription, MsgUpdatePullRequestDescriptionResponse, MsgInvokeMergePullRequest, MsgInvokeMergePullRequestResponse, MsgSetPullRequestState, MsgSetPullRequestStateResponse, MsgAddPullRequestReviewers, MsgAddPullRequestReviewersResponse, MsgRemovePullRequestReviewers, MsgRemovePullRequestReviewersResponse, MsgAddPullRequestAssignees, MsgAddPullRequestAssigneesResponse, MsgRemovePullRequestAssignees, MsgRemovePullRequestAssigneesResponse, MsgLinkPullRequestIssueByIid, MsgLinkPullRequestIssueByIidResponse, MsgUnlinkPullRequestIssueByIid, MsgUnlinkPullRequestIssueByIidResponse, MsgAddPullRequestLabels, MsgAddPullRequestLabelsResponse, MsgRemovePullRequestLabels, MsgRemovePullRequestLabelsResponse, MsgDeletePullRequest, MsgDeletePullRequestResponse, MsgCreateDao, MsgCreateDaoResponse, MsgRenameDao, MsgRenameDaoResponse, MsgUpdateDaoDescription, MsgUpdateDaoDescriptionResponse, MsgUpdateDaoWebsite, MsgUpdateDaoWebsiteResponse, MsgUpdateDaoLocation, MsgUpdateDaoLocationResponse, MsgUpdateDaoAvatar, MsgUpdateDaoAvatarResponse, MsgDeleteDao, MsgDeleteDaoResponse, MsgCreateComment, MsgCreateCommentResponse, MsgUpdateComment, MsgUpdateCommentResponse, MsgDeleteComment, MsgDeleteCommentResponse, MsgToggleCommentResolved, MsgToggleCommentResolvedResponse, MsgCreateIssue, MsgCreateIssueResponse, MsgUpdateIssueTitle, MsgUpdateIssueTitleResponse, MsgUpdateIssueDescription, MsgUpdateIssueDescriptionResponse, MsgToggleIssueState, MsgToggleIssueStateResponse, MsgAddIssueAssignees, MsgAddIssueAssigneesResponse, MsgRemoveIssueAssignees, MsgRemoveIssueAssigneesResponse, MsgAddIssueLabels, MsgAddIssueLabelsResponse, MsgRemoveIssueLabels, MsgRemoveIssueLabelsResponse, MsgDeleteIssue, MsgDeleteIssueResponse, MsgCreateRepository, MsgCreateRepositoryResponse, MsgInvokeForkRepository, MsgInvokeForkRepositoryResponse, MsgForkRepository, MsgForkRepositoryResponse, MsgForkRepositorySuccess, MsgForkRepositorySuccessResponse, MsgRenameRepository, MsgRenameRepositoryResponse, MsgUpdateRepositoryDescription, MsgUpdateRepositoryDescriptionResponse, MsgToggleRepositoryArchived, MsgToggleRepositoryArchivedResponse, MsgChangeOwner, MsgChangeOwnerResponse, MsgUpdateRepositoryCollaborator, MsgUpdateRepositoryCollaboratorResponse, MsgRemoveRepositoryCollaborator, MsgRemoveRepositoryCollaboratorResponse, MsgCreateRepositoryLabel, MsgCreateRepositoryLabelResponse, MsgUpdateRepositoryLabel, MsgUpdateRepositoryLabelResponse, MsgDeleteRepositoryLabel, MsgDeleteRepositoryLabelResponse, MsgSetDefaultBranch, MsgSetDefaultBranchResponse, MsgToggleRepositoryForking, MsgToggleRepositoryForkingResponse, MsgToggleArweaveBackup, MsgToggleArweaveBackupResponse, MsgDeleteRepository, MsgDeleteRepositoryResponse, MsgCreateUser, MsgCreateUserResponse, MsgUpdateUserUsername, MsgUpdateUserUsernameResponse, MsgUpdateUserName, MsgUpdateUserNameResponse, MsgUpdateUserBio, MsgUpdateUserBioResponse, MsgUpdateUserAvatar, MsgUpdateUserAvatarResponse, MsgDeleteUser, MsgDeleteUserResponse, MsgUpdateRepositoryBackupRef, MsgUpdateRepositoryBackupRefResponse, MsgAddRepositoryBackupRef, MsgAddRepositoryBackupRefResponse, MsgUpdateUserPinnedRepositories, MsgUpdateUserPinnedRepositoriesResponse, MsgUpdateDaoPinnedRepositories, MsgUpdateDaoPinnedRepositoriesResponse, MsgUpdateParams, MsgUpdateParamsResponse, MsgDistributePlatformIncentives, MsgDistributePlatformIncentivesResponse } from "./tx";
/** Msg defines the Msg service. */
export interface Msg {
    /** this line is used by starport scaffolding # proto/tx/rpc */
    toggleForcePush(request: MsgToggleForcePush): Promise<MsgToggleForcePushResponse>;
    revokeProviderPermission(request: MsgRevokeProviderPermission): Promise<MsgRevokeProviderPermissionResponse>;
    authorizeProvider(request: MsgAuthorizeProvider): Promise<MsgAuthorizeProviderResponse>;
    createTask(request: MsgCreateTask): Promise<MsgCreateTaskResponse>;
    updateTask(request: MsgUpdateTask): Promise<MsgUpdateTaskResponse>;
    deleteTask(request: MsgDeleteTask): Promise<MsgDeleteTaskResponse>;
    setBranch(request: MsgSetBranch): Promise<MsgSetBranchResponse>;
    multiSetBranch(request: MsgMultiSetBranch): Promise<MsgMultiSetBranchResponse>;
    deleteBranch(request: MsgDeleteBranch): Promise<MsgDeleteBranchResponse>;
    multiDeleteBranch(request: MsgMultiDeleteBranch): Promise<MsgMultiDeleteBranchResponse>;
    setTag(request: MsgSetTag): Promise<MsgSetTagResponse>;
    multiSetTag(request: MsgMultiSetTag): Promise<MsgMultiSetTagResponse>;
    deleteTag(request: MsgDeleteTag): Promise<MsgDeleteTagResponse>;
    multiDeleteTag(request: MsgMultiDeleteTag): Promise<MsgMultiDeleteTagResponse>;
    addMember(request: MsgAddMember): Promise<MsgAddMemberResponse>;
    updateMemberRole(request: MsgUpdateMemberRole): Promise<MsgUpdateMemberRoleResponse>;
    removeMember(request: MsgRemoveMember): Promise<MsgRemoveMemberResponse>;
    createBounty(request: MsgCreateBounty): Promise<MsgCreateBountyResponse>;
    updateBountyExpiry(request: MsgUpdateBountyExpiry): Promise<MsgUpdateBountyExpiryResponse>;
    closeBounty(request: MsgCloseBounty): Promise<MsgCloseBountyResponse>;
    deleteBounty(request: MsgDeleteBounty): Promise<MsgDeleteBountyResponse>;
    /** this line is used by starport scaffolding # proto/tx/rpc */
    exercise(request: MsgExercise): Promise<MsgExerciseResponse>;
    createRelease(request: MsgCreateRelease): Promise<MsgCreateReleaseResponse>;
    updateRelease(request: MsgUpdateRelease): Promise<MsgUpdateReleaseResponse>;
    deleteRelease(request: MsgDeleteRelease): Promise<MsgDeleteReleaseResponse>;
    createPullRequest(request: MsgCreatePullRequest): Promise<MsgCreatePullRequestResponse>;
    updatePullRequestTitle(request: MsgUpdatePullRequestTitle): Promise<MsgUpdatePullRequestTitleResponse>;
    updatePullRequestDescription(request: MsgUpdatePullRequestDescription): Promise<MsgUpdatePullRequestDescriptionResponse>;
    invokeMergePullRequest(request: MsgInvokeMergePullRequest): Promise<MsgInvokeMergePullRequestResponse>;
    setPullRequestState(request: MsgSetPullRequestState): Promise<MsgSetPullRequestStateResponse>;
    addPullRequestReviewers(request: MsgAddPullRequestReviewers): Promise<MsgAddPullRequestReviewersResponse>;
    removePullRequestReviewers(request: MsgRemovePullRequestReviewers): Promise<MsgRemovePullRequestReviewersResponse>;
    addPullRequestAssignees(request: MsgAddPullRequestAssignees): Promise<MsgAddPullRequestAssigneesResponse>;
    removePullRequestAssignees(request: MsgRemovePullRequestAssignees): Promise<MsgRemovePullRequestAssigneesResponse>;
    linkPullRequestIssueByIid(request: MsgLinkPullRequestIssueByIid): Promise<MsgLinkPullRequestIssueByIidResponse>;
    unlinkPullRequestIssueByIid(request: MsgUnlinkPullRequestIssueByIid): Promise<MsgUnlinkPullRequestIssueByIidResponse>;
    addPullRequestLabels(request: MsgAddPullRequestLabels): Promise<MsgAddPullRequestLabelsResponse>;
    removePullRequestLabels(request: MsgRemovePullRequestLabels): Promise<MsgRemovePullRequestLabelsResponse>;
    deletePullRequest(request: MsgDeletePullRequest): Promise<MsgDeletePullRequestResponse>;
    createDao(request: MsgCreateDao): Promise<MsgCreateDaoResponse>;
    renameDao(request: MsgRenameDao): Promise<MsgRenameDaoResponse>;
    updateDaoDescription(request: MsgUpdateDaoDescription): Promise<MsgUpdateDaoDescriptionResponse>;
    updateDaoWebsite(request: MsgUpdateDaoWebsite): Promise<MsgUpdateDaoWebsiteResponse>;
    updateDaoLocation(request: MsgUpdateDaoLocation): Promise<MsgUpdateDaoLocationResponse>;
    updateDaoAvatar(request: MsgUpdateDaoAvatar): Promise<MsgUpdateDaoAvatarResponse>;
    deleteDao(request: MsgDeleteDao): Promise<MsgDeleteDaoResponse>;
    createComment(request: MsgCreateComment): Promise<MsgCreateCommentResponse>;
    updateComment(request: MsgUpdateComment): Promise<MsgUpdateCommentResponse>;
    deleteComment(request: MsgDeleteComment): Promise<MsgDeleteCommentResponse>;
    toggleCommentResolved(request: MsgToggleCommentResolved): Promise<MsgToggleCommentResolvedResponse>;
    createIssue(request: MsgCreateIssue): Promise<MsgCreateIssueResponse>;
    updateIssueTitle(request: MsgUpdateIssueTitle): Promise<MsgUpdateIssueTitleResponse>;
    updateIssueDescription(request: MsgUpdateIssueDescription): Promise<MsgUpdateIssueDescriptionResponse>;
    toggleIssueState(request: MsgToggleIssueState): Promise<MsgToggleIssueStateResponse>;
    addIssueAssignees(request: MsgAddIssueAssignees): Promise<MsgAddIssueAssigneesResponse>;
    removeIssueAssignees(request: MsgRemoveIssueAssignees): Promise<MsgRemoveIssueAssigneesResponse>;
    addIssueLabels(request: MsgAddIssueLabels): Promise<MsgAddIssueLabelsResponse>;
    removeIssueLabels(request: MsgRemoveIssueLabels): Promise<MsgRemoveIssueLabelsResponse>;
    deleteIssue(request: MsgDeleteIssue): Promise<MsgDeleteIssueResponse>;
    createRepository(request: MsgCreateRepository): Promise<MsgCreateRepositoryResponse>;
    invokeForkRepository(request: MsgInvokeForkRepository): Promise<MsgInvokeForkRepositoryResponse>;
    forkRepository(request: MsgForkRepository): Promise<MsgForkRepositoryResponse>;
    forkRepositorySuccess(request: MsgForkRepositorySuccess): Promise<MsgForkRepositorySuccessResponse>;
    renameRepository(request: MsgRenameRepository): Promise<MsgRenameRepositoryResponse>;
    updateRepositoryDescription(request: MsgUpdateRepositoryDescription): Promise<MsgUpdateRepositoryDescriptionResponse>;
    toggleRepositoryArchived(request: MsgToggleRepositoryArchived): Promise<MsgToggleRepositoryArchivedResponse>;
    changeOwner(request: MsgChangeOwner): Promise<MsgChangeOwnerResponse>;
    updateRepositoryCollaborator(request: MsgUpdateRepositoryCollaborator): Promise<MsgUpdateRepositoryCollaboratorResponse>;
    removeRepositoryCollaborator(request: MsgRemoveRepositoryCollaborator): Promise<MsgRemoveRepositoryCollaboratorResponse>;
    createRepositoryLabel(request: MsgCreateRepositoryLabel): Promise<MsgCreateRepositoryLabelResponse>;
    updateRepositoryLabel(request: MsgUpdateRepositoryLabel): Promise<MsgUpdateRepositoryLabelResponse>;
    deleteRepositoryLabel(request: MsgDeleteRepositoryLabel): Promise<MsgDeleteRepositoryLabelResponse>;
    setDefaultBranch(request: MsgSetDefaultBranch): Promise<MsgSetDefaultBranchResponse>;
    toggleRepositoryForking(request: MsgToggleRepositoryForking): Promise<MsgToggleRepositoryForkingResponse>;
    toggleArweaveBackup(request: MsgToggleArweaveBackup): Promise<MsgToggleArweaveBackupResponse>;
    deleteRepository(request: MsgDeleteRepository): Promise<MsgDeleteRepositoryResponse>;
    createUser(request: MsgCreateUser): Promise<MsgCreateUserResponse>;
    updateUserUsername(request: MsgUpdateUserUsername): Promise<MsgUpdateUserUsernameResponse>;
    updateUserName(request: MsgUpdateUserName): Promise<MsgUpdateUserNameResponse>;
    updateUserBio(request: MsgUpdateUserBio): Promise<MsgUpdateUserBioResponse>;
    updateUserAvatar(request: MsgUpdateUserAvatar): Promise<MsgUpdateUserAvatarResponse>;
    deleteUser(request: MsgDeleteUser): Promise<MsgDeleteUserResponse>;
    /** rpc TransferUser(MsgTransferUser) returns (MsgTransferUserResponse); */
    updateRepositoryBackupRef(request: MsgUpdateRepositoryBackupRef): Promise<MsgUpdateRepositoryBackupRefResponse>;
    addRepositoryBackupRef(request: MsgAddRepositoryBackupRef): Promise<MsgAddRepositoryBackupRefResponse>;
    updateUserPinnedRepositories(request: MsgUpdateUserPinnedRepositories): Promise<MsgUpdateUserPinnedRepositoriesResponse>;
    updateDaoPinnedRepositories(request: MsgUpdateDaoPinnedRepositories): Promise<MsgUpdateDaoPinnedRepositoriesResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/gitopia module
     * parameters. The authority is hard-coded to the x/gov module account.
     */
    updateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    distributePlatformIncentives(request: MsgDistributePlatformIncentives): Promise<MsgDistributePlatformIncentivesResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    toggleForcePush(request: MsgToggleForcePush): Promise<MsgToggleForcePushResponse>;
    revokeProviderPermission(request: MsgRevokeProviderPermission): Promise<MsgRevokeProviderPermissionResponse>;
    authorizeProvider(request: MsgAuthorizeProvider): Promise<MsgAuthorizeProviderResponse>;
    createTask(request: MsgCreateTask): Promise<MsgCreateTaskResponse>;
    updateTask(request: MsgUpdateTask): Promise<MsgUpdateTaskResponse>;
    deleteTask(request: MsgDeleteTask): Promise<MsgDeleteTaskResponse>;
    setBranch(request: MsgSetBranch): Promise<MsgSetBranchResponse>;
    multiSetBranch(request: MsgMultiSetBranch): Promise<MsgMultiSetBranchResponse>;
    deleteBranch(request: MsgDeleteBranch): Promise<MsgDeleteBranchResponse>;
    multiDeleteBranch(request: MsgMultiDeleteBranch): Promise<MsgMultiDeleteBranchResponse>;
    setTag(request: MsgSetTag): Promise<MsgSetTagResponse>;
    multiSetTag(request: MsgMultiSetTag): Promise<MsgMultiSetTagResponse>;
    deleteTag(request: MsgDeleteTag): Promise<MsgDeleteTagResponse>;
    multiDeleteTag(request: MsgMultiDeleteTag): Promise<MsgMultiDeleteTagResponse>;
    addMember(request: MsgAddMember): Promise<MsgAddMemberResponse>;
    updateMemberRole(request: MsgUpdateMemberRole): Promise<MsgUpdateMemberRoleResponse>;
    removeMember(request: MsgRemoveMember): Promise<MsgRemoveMemberResponse>;
    createBounty(request: MsgCreateBounty): Promise<MsgCreateBountyResponse>;
    updateBountyExpiry(request: MsgUpdateBountyExpiry): Promise<MsgUpdateBountyExpiryResponse>;
    closeBounty(request: MsgCloseBounty): Promise<MsgCloseBountyResponse>;
    deleteBounty(request: MsgDeleteBounty): Promise<MsgDeleteBountyResponse>;
    exercise(request: MsgExercise): Promise<MsgExerciseResponse>;
    createRelease(request: MsgCreateRelease): Promise<MsgCreateReleaseResponse>;
    updateRelease(request: MsgUpdateRelease): Promise<MsgUpdateReleaseResponse>;
    deleteRelease(request: MsgDeleteRelease): Promise<MsgDeleteReleaseResponse>;
    createPullRequest(request: MsgCreatePullRequest): Promise<MsgCreatePullRequestResponse>;
    updatePullRequestTitle(request: MsgUpdatePullRequestTitle): Promise<MsgUpdatePullRequestTitleResponse>;
    updatePullRequestDescription(request: MsgUpdatePullRequestDescription): Promise<MsgUpdatePullRequestDescriptionResponse>;
    invokeMergePullRequest(request: MsgInvokeMergePullRequest): Promise<MsgInvokeMergePullRequestResponse>;
    setPullRequestState(request: MsgSetPullRequestState): Promise<MsgSetPullRequestStateResponse>;
    addPullRequestReviewers(request: MsgAddPullRequestReviewers): Promise<MsgAddPullRequestReviewersResponse>;
    removePullRequestReviewers(request: MsgRemovePullRequestReviewers): Promise<MsgRemovePullRequestReviewersResponse>;
    addPullRequestAssignees(request: MsgAddPullRequestAssignees): Promise<MsgAddPullRequestAssigneesResponse>;
    removePullRequestAssignees(request: MsgRemovePullRequestAssignees): Promise<MsgRemovePullRequestAssigneesResponse>;
    linkPullRequestIssueByIid(request: MsgLinkPullRequestIssueByIid): Promise<MsgLinkPullRequestIssueByIidResponse>;
    unlinkPullRequestIssueByIid(request: MsgUnlinkPullRequestIssueByIid): Promise<MsgUnlinkPullRequestIssueByIidResponse>;
    addPullRequestLabels(request: MsgAddPullRequestLabels): Promise<MsgAddPullRequestLabelsResponse>;
    removePullRequestLabels(request: MsgRemovePullRequestLabels): Promise<MsgRemovePullRequestLabelsResponse>;
    deletePullRequest(request: MsgDeletePullRequest): Promise<MsgDeletePullRequestResponse>;
    createDao(request: MsgCreateDao): Promise<MsgCreateDaoResponse>;
    renameDao(request: MsgRenameDao): Promise<MsgRenameDaoResponse>;
    updateDaoDescription(request: MsgUpdateDaoDescription): Promise<MsgUpdateDaoDescriptionResponse>;
    updateDaoWebsite(request: MsgUpdateDaoWebsite): Promise<MsgUpdateDaoWebsiteResponse>;
    updateDaoLocation(request: MsgUpdateDaoLocation): Promise<MsgUpdateDaoLocationResponse>;
    updateDaoAvatar(request: MsgUpdateDaoAvatar): Promise<MsgUpdateDaoAvatarResponse>;
    deleteDao(request: MsgDeleteDao): Promise<MsgDeleteDaoResponse>;
    createComment(request: MsgCreateComment): Promise<MsgCreateCommentResponse>;
    updateComment(request: MsgUpdateComment): Promise<MsgUpdateCommentResponse>;
    deleteComment(request: MsgDeleteComment): Promise<MsgDeleteCommentResponse>;
    toggleCommentResolved(request: MsgToggleCommentResolved): Promise<MsgToggleCommentResolvedResponse>;
    createIssue(request: MsgCreateIssue): Promise<MsgCreateIssueResponse>;
    updateIssueTitle(request: MsgUpdateIssueTitle): Promise<MsgUpdateIssueTitleResponse>;
    updateIssueDescription(request: MsgUpdateIssueDescription): Promise<MsgUpdateIssueDescriptionResponse>;
    toggleIssueState(request: MsgToggleIssueState): Promise<MsgToggleIssueStateResponse>;
    addIssueAssignees(request: MsgAddIssueAssignees): Promise<MsgAddIssueAssigneesResponse>;
    removeIssueAssignees(request: MsgRemoveIssueAssignees): Promise<MsgRemoveIssueAssigneesResponse>;
    addIssueLabels(request: MsgAddIssueLabels): Promise<MsgAddIssueLabelsResponse>;
    removeIssueLabels(request: MsgRemoveIssueLabels): Promise<MsgRemoveIssueLabelsResponse>;
    deleteIssue(request: MsgDeleteIssue): Promise<MsgDeleteIssueResponse>;
    createRepository(request: MsgCreateRepository): Promise<MsgCreateRepositoryResponse>;
    invokeForkRepository(request: MsgInvokeForkRepository): Promise<MsgInvokeForkRepositoryResponse>;
    forkRepository(request: MsgForkRepository): Promise<MsgForkRepositoryResponse>;
    forkRepositorySuccess(request: MsgForkRepositorySuccess): Promise<MsgForkRepositorySuccessResponse>;
    renameRepository(request: MsgRenameRepository): Promise<MsgRenameRepositoryResponse>;
    updateRepositoryDescription(request: MsgUpdateRepositoryDescription): Promise<MsgUpdateRepositoryDescriptionResponse>;
    toggleRepositoryArchived(request: MsgToggleRepositoryArchived): Promise<MsgToggleRepositoryArchivedResponse>;
    changeOwner(request: MsgChangeOwner): Promise<MsgChangeOwnerResponse>;
    updateRepositoryCollaborator(request: MsgUpdateRepositoryCollaborator): Promise<MsgUpdateRepositoryCollaboratorResponse>;
    removeRepositoryCollaborator(request: MsgRemoveRepositoryCollaborator): Promise<MsgRemoveRepositoryCollaboratorResponse>;
    createRepositoryLabel(request: MsgCreateRepositoryLabel): Promise<MsgCreateRepositoryLabelResponse>;
    updateRepositoryLabel(request: MsgUpdateRepositoryLabel): Promise<MsgUpdateRepositoryLabelResponse>;
    deleteRepositoryLabel(request: MsgDeleteRepositoryLabel): Promise<MsgDeleteRepositoryLabelResponse>;
    setDefaultBranch(request: MsgSetDefaultBranch): Promise<MsgSetDefaultBranchResponse>;
    toggleRepositoryForking(request: MsgToggleRepositoryForking): Promise<MsgToggleRepositoryForkingResponse>;
    toggleArweaveBackup(request: MsgToggleArweaveBackup): Promise<MsgToggleArweaveBackupResponse>;
    deleteRepository(request: MsgDeleteRepository): Promise<MsgDeleteRepositoryResponse>;
    createUser(request: MsgCreateUser): Promise<MsgCreateUserResponse>;
    updateUserUsername(request: MsgUpdateUserUsername): Promise<MsgUpdateUserUsernameResponse>;
    updateUserName(request: MsgUpdateUserName): Promise<MsgUpdateUserNameResponse>;
    updateUserBio(request: MsgUpdateUserBio): Promise<MsgUpdateUserBioResponse>;
    updateUserAvatar(request: MsgUpdateUserAvatar): Promise<MsgUpdateUserAvatarResponse>;
    deleteUser(request: MsgDeleteUser): Promise<MsgDeleteUserResponse>;
    updateRepositoryBackupRef(request: MsgUpdateRepositoryBackupRef): Promise<MsgUpdateRepositoryBackupRefResponse>;
    addRepositoryBackupRef(request: MsgAddRepositoryBackupRef): Promise<MsgAddRepositoryBackupRefResponse>;
    updateUserPinnedRepositories(request: MsgUpdateUserPinnedRepositories): Promise<MsgUpdateUserPinnedRepositoriesResponse>;
    updateDaoPinnedRepositories(request: MsgUpdateDaoPinnedRepositories): Promise<MsgUpdateDaoPinnedRepositoriesResponse>;
    updateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    distributePlatformIncentives(request: MsgDistributePlatformIncentives): Promise<MsgDistributePlatformIncentivesResponse>;
}
